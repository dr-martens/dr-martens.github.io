<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Dr. Steffen Martens</title>
    <link>https://www.martens.tech/post/</link>
      <atom:link href="https://www.martens.tech/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.martens.tech/img/icon-192.png</url>
      <title>Posts</title>
      <link>https://www.martens.tech/post/</link>
    </image>
    
    <item>
      <title>My notes on Hugo Problems</title>
      <link>https://www.martens.tech/post/hugo-problems/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://www.martens.tech/post/hugo-problems/</guid>
      <description>&lt;p&gt;On this page, you&#39;ll find some examples of the types of technical content that can be rendered with Academic.&lt;/p&gt;
&lt;h2 id=&#34;alignment-of-menus&#34;&gt;Alignment of menus&lt;/h2&gt;
&lt;p&gt;Academic theme contains &lt;code&gt;config\_default\params.toml&lt;/code&gt; where users can specify the menu alignment in the &amp;ldquo;Advanced&amp;rdquo; section.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# Main menu alignment (l = left, c = center, r = right) and logo options.
main_menu = {align = &amp;quot;l&amp;quot;, show_logo = true}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The default is left-aligned (&lt;code&gt;l&lt;/code&gt;)&lt;/p&gt;
&lt;h2 id=&#34;contact-infos&#34;&gt;Contact infos&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;config/_default/params.toml&lt;/code&gt; one can change the contact information in the &lt;strong&gt;Contact details&lt;/strong&gt; section.&lt;/p&gt;
&lt;h2 id=&#34;featurette&#34;&gt;Featurette&lt;/h2&gt;
&lt;p&gt;As an individual, use the Featurette widget to showcase your skills and expertise. As an organization, use the widget to highlight the key features of your product or service. Edit the front matter of &lt;code&gt;home/skills.md&lt;/code&gt; to add your &lt;code&gt;skills/features&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;icons&#34;&gt;Icons&lt;/h2&gt;
&lt;p&gt;Academic enables you to use a wide range of icons from Font Awesome and Academicons.&lt;/p&gt;
&lt;p&gt;Icon pack “fab” includes the following brand icons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;twitter, weixin, weibo, linkedin, github, facebook, pinterest, twitch, youtube, instagram, soundcloud&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An overview one finds &lt;a href=&#34;https://fontawesome.com/icons?d=gallery&amp;amp;s=brands&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Icon packs “fas” and “far” include the following general icons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fax, envelope (for email), comments (for discussion forum)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An overview one finds &lt;a href=&#34;https://fontawesome.com/icons?d=gallery&amp;amp;s=regular,solid&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Icon pack “ai” includes the following academic icons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cv, google-scholar, arxiv, orcid, researchgate, mendeley&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ToDo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;- [ ] Use/add own icons to skills
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;publications&#34;&gt;Publications&lt;/h2&gt;
&lt;p&gt;How to importing publications from bibtex to a hugo-academic blog?&lt;/p&gt;
&lt;p&gt;The solution shown below bases on the this &lt;a href=&#34;https://www.r-bloggers.com/automatically-importing-publications-from-bibtex-to-a-hugo-academic-blog-2/&#34;&gt;post&lt;/a&gt;
One nice feature of hugo-academic is that it includes out-of-the-box a “Publications” section, allowing researchers to easily create a list of their publication as a section of the website. Unfortunately, in order to populate that list, users have to manually create one different .md file for each publication, by cutting and pasting several different info (e.g., title, authors, etc.) in a “simple”&amp;rdquo; template like this one.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# script to parse my publications to single md files for hugo webpage

bibtex_2academic &amp;lt;- function(bibfile,
                             outfold,
                             abstract = FALSE, 
                             overwrite = FALSE,
                             admin.surname=NULL){
  
  require(RefManageR)
  require(dplyr)
  require(stringr)
  require(anytime)
  
  if(is.null(admin.surname)){stop(&#39;Surname of webpage admin not specified.&#39;)}
  
  # Import the bibtex file and convert to data.frame
  mypubs   &amp;lt;- ReadBib(bibfile, check = &amp;quot;warn&amp;quot;, .Encoding = &amp;quot;UTF-8&amp;quot;) %&amp;gt;%
    as.data.frame()
  
  print(mypubs)
  
  # assign &amp;quot;categories&amp;quot; to the different types of publications
  mypubs   &amp;lt;- mypubs %&amp;gt;%
    dplyr::mutate(
      pubtype = dplyr::case_when(bibtype == &amp;quot;Article&amp;quot; ~ &amp;quot;2&amp;quot;,
                                 bibtype == &amp;quot;Article in Press&amp;quot; ~ &amp;quot;2&amp;quot;,
                                 bibtype == &amp;quot;InProceedings&amp;quot; ~ &amp;quot;1&amp;quot;,
                                 bibtype == &amp;quot;Proceedings&amp;quot; ~ &amp;quot;1&amp;quot;,
                                 bibtype == &amp;quot;Conference&amp;quot; ~ &amp;quot;1&amp;quot;,
                                 bibtype == &amp;quot;Conference Paper&amp;quot; ~ &amp;quot;1&amp;quot;,
                                 bibtype == &amp;quot;MastersThesis&amp;quot; ~ &amp;quot;3&amp;quot;,
                                 bibtype == &amp;quot;PhdThesis&amp;quot; ~ &amp;quot;3&amp;quot;,
                                 bibtype == &amp;quot;Manual&amp;quot; ~ &amp;quot;4&amp;quot;,
                                 bibtype == &amp;quot;TechReport&amp;quot; ~ &amp;quot;4&amp;quot;,
                                 bibtype == &amp;quot;Book&amp;quot; ~ &amp;quot;5&amp;quot;,
                                 bibtype == &amp;quot;InCollection&amp;quot; ~ &amp;quot;6&amp;quot;,
                                 bibtype == &amp;quot;InBook&amp;quot; ~ &amp;quot;6&amp;quot;,
                                 bibtype == &amp;quot;Misc&amp;quot; ~ &amp;quot;0&amp;quot;,
                                 TRUE ~ &amp;quot;0&amp;quot;))
  
  # create a function which populates the md template based on the info
  # about a publication
  create_md &amp;lt;- function(x) {
    
    # names of passed arguments
    pass.arg &amp;lt;- names(x)
    
    # define a date and create filename by appending date and start of title
    if(&amp;quot;year&amp;quot; %in% pass.arg) {
      x[[&amp;quot;date&amp;quot;]] &amp;lt;- paste0(x[[&amp;quot;year&amp;quot;]], &amp;quot;-01-01&amp;quot;)
    } else {
      x[[&amp;quot;date&amp;quot;]] &amp;lt;- &amp;quot;2999-01-01&amp;quot;
    }
    
    filename &amp;lt;- paste(x[[&amp;quot;date&amp;quot;]], x[[&amp;quot;title&amp;quot;]] %&amp;gt;%
                        str_replace_all(fixed(&amp;quot; &amp;quot;), &amp;quot;_&amp;quot;) %&amp;gt;%
                        str_remove_all(fixed(&amp;quot;:&amp;quot;)) %&amp;gt;%
                        str_sub(1, 20) %&amp;gt;%
                        paste0(&amp;quot;.md&amp;quot;), sep = &amp;quot;_&amp;quot;)
    # start writing
    if (!file.exists(file.path(outfold, filename)) | overwrite) {
      fileConn &amp;lt;- file.path(outfold, filename)
      print(fileConn)
      write(&amp;quot;---&amp;quot;, fileConn)
      
      # abstract and optional shortened version.
      if ((&amp;quot;abstract&amp;quot; %in% pass.arg) &amp;amp; abstract) {
        write(paste0(&amp;quot;abstract: &amp;quot;, x[[&amp;quot;abstract&amp;quot;]]), fileConn, append = T)
      } else {
        write(&amp;quot;abstract: &amp;quot;, fileConn, append = T)
      }
      write(&amp;quot;abstract_short: &amp;quot;, fileConn, append = T)
      
      # Authors
      auth_hugo &amp;lt;- unlist(strsplit(x[&amp;quot;author&amp;quot;], &amp;quot; and &amp;quot;))
      
      # replace German Umlaute
      auth_hugo &amp;lt;- str_replace_all(auth_hugo, &amp;quot;ä&amp;quot;, &amp;quot;&amp;amp;auml;&amp;quot;)
      auth_hugo &amp;lt;- str_replace_all(auth_hugo, &amp;quot;ö&amp;quot;, &amp;quot;&amp;amp;ouml;&amp;quot;)
      auth_hugo &amp;lt;- str_replace_all(auth_hugo, &amp;quot;ü&amp;quot;, &amp;quot;&amp;amp;üuml;&amp;quot;)
      auth_hugo &amp;lt;- str_replace_all(auth_hugo, &amp;quot;ß&amp;quot;, &amp;quot;&amp;amp;szlig;&amp;quot;)
      auth_hugo &amp;lt;- stringi::stri_trans_general(auth_hugo, &amp;quot;latin-ascii&amp;quot;)
      write(&amp;quot;authors: &amp;quot;, fileConn, append = T)
      for(auth in auth_hugo){
        if(grepl(admin.surname, auth)){ # add admin as author instead of the surname
          write(&amp;quot;- admin&amp;quot;, fileConn, append = T)
        }else{
          if(grepl(&amp;quot;,&amp;quot;,auth)){ # check if first and surname are separated by comma
            tmp &amp;lt;- unlist(strsplit(auth, &amp;quot;,&amp;quot;))
            write(paste0(&amp;quot;- &amp;quot;,trimws(tmp[2]),&amp;quot; &amp;quot;,trimws(tmp[1])), fileConn, append = T)
          }else{
            write(paste0(&amp;quot;- &amp;quot;,auth), fileConn, append = T)
          }
        }
      }
      
      #date
      write(paste0(&amp;quot;date: \&amp;quot;&amp;quot;, anydate(x[[&amp;quot;date&amp;quot;]]), &amp;quot;\&amp;quot;&amp;quot;), fileConn, append = T)
      # doi
      if (&amp;quot;doi&amp;quot; %in% pass.arg){
        write(paste0(&amp;quot;doi: \&amp;quot;https://doi.org/&amp;quot;,x[[&amp;quot;doi&amp;quot;]], &amp;quot;\&amp;quot;&amp;quot;), fileConn, append = T)
      }else{
        write(&amp;quot;doi: \&amp;quot;\&amp;quot;&amp;quot;, fileConn, append = T)
      }

      # Publication type. Legend:
      # 0 = Uncategorized, 1 = Conference paper, 2 = Journal article
      # 3 = Manuscript, 4 = Report, 5 = Book,  6 = Book section
      # Publication details: journal, volume, issue, page numbers and doi link
      if (&amp;quot;journal&amp;quot; %in% pass.arg){ publication &amp;lt;- x[[&amp;quot;journal&amp;quot;]] }
      else{ publication &amp;lt;-&amp;quot;&amp;quot;}
      if (&amp;quot;volume&amp;quot; %in% pass.arg) publication &amp;lt;- paste(publication, 
                                                       x[[&amp;quot;volume&amp;quot;]])
      if (&amp;quot;number&amp;quot; %in% pass.arg) publication &amp;lt;- paste0(publication,
                                                       &amp;quot; (&amp;quot;, x[[&amp;quot;number&amp;quot;]], &amp;quot;)&amp;quot;)
      if (&amp;quot;pages&amp;quot; %in% pass.arg) publication &amp;lt;- paste0(publication,
                                                      &amp;quot;, pp. &amp;quot;, x[[&amp;quot;pages&amp;quot;]])
      # if (&amp;quot;doi&amp;quot; %in% pass.arg) publication &amp;lt;- paste0(publication,
      #                                               &amp;quot;, &amp;quot;, paste0(&amp;quot;https://doi.org/&amp;quot;, 
      #                                                            x[[&amp;quot;doi&amp;quot;]]))
      
      write(paste0(&amp;quot;publication: \&amp;quot;&amp;quot;, publication,&amp;quot;\&amp;quot;&amp;quot;), fileConn, append = T)
      write(paste0(&amp;quot;publication_short: \&amp;quot;&amp;quot;, publication,&amp;quot;\&amp;quot;&amp;quot;),fileConn, append = T)
      
      write(&amp;quot;publication_types: &amp;quot;, fileConn, append = T)      
      write(paste0(&amp;quot;- \&amp;quot;&amp;quot;, x[[&amp;quot;pubtype&amp;quot;]],&amp;quot;\&amp;quot;&amp;quot;), fileConn, append = T)
      
      # title
      if (&amp;quot;title&amp;quot; %in% pass.arg){
        write(paste0(&amp;quot;title: \&amp;quot;&amp;quot;,x[[&amp;quot;title&amp;quot;]],&amp;quot;\&amp;quot;&amp;quot;), fileConn, append = T)
      }else{
        write(&amp;quot;title: \&amp;quot;\&amp;quot;&amp;quot;, fileConn, append = T)
      }
    
      # other possible fields are kept empty. They can be customized later by 
      # editing the created md
      # featured
      write(&amp;quot;featured: false&amp;quot;, fileConn, append = T)
      # image
      write(&amp;quot;image:&amp;quot;, fileConn, append = T)
      write(&amp;quot;  caption: \&amp;quot;\&amp;quot;&amp;quot;, fileConn, append = T)
      write(&amp;quot;  focal_point: \&amp;quot;\&amp;quot;&amp;quot;, fileConn, append = T)
      write(&amp;quot;  preview_only: false&amp;quot;, fileConn, append = T)
      # set projects
      write(&amp;quot;projects: []&amp;quot;, fileConn, append = T)
      write(&amp;quot;tags: &amp;quot;, fileConn, append = T)
      write(&amp;quot;- \&amp;quot;\&amp;quot;&amp;quot;, fileConn, append = T)
      #links
      if (&amp;quot;preprint&amp;quot; %in% pass.arg){
        write(paste0(&amp;quot;url_preprint: &amp;quot;,x[[&amp;quot;preprint&amp;quot;]]), fileConn, append = T)
      }else{
        write(&amp;quot;url_preprint: \&amp;quot;\&amp;quot;&amp;quot;, fileConn, append = T)
      }
      write(&amp;quot;url_code: \&amp;quot;\&amp;quot;&amp;quot;, fileConn, append = T)
      write(&amp;quot;url_dataset: \&amp;quot;\&amp;quot;&amp;quot;, fileConn, append = T)
      write(&amp;quot;url_pdf: \&amp;quot;\&amp;quot;&amp;quot;, fileConn, append = T)
      write(&amp;quot;url_poster: \&amp;quot;\&amp;quot;&amp;quot;, fileConn, append = T)
      write(&amp;quot;url_project: \&amp;quot;\&amp;quot;&amp;quot;, fileConn, append = T)
      write(&amp;quot;url_slides: \&amp;quot;\&amp;quot;&amp;quot;, fileConn, append = T)
      write(&amp;quot;url_source: \&amp;quot;\&amp;quot;&amp;quot;, fileConn, append = T)
      write(&amp;quot;url_video : \&amp;quot;\&amp;quot;&amp;quot;, fileConn, append = T)
      
      #other stuff
      # write(&amp;quot;math = true&amp;quot;, fileConn, append = T)
      # write(&amp;quot;highlight = true&amp;quot;, fileConn, append = T)
      # Featured image
      # write(&amp;quot;[header]&amp;quot;, fileConn, append = T)
      
      write(&amp;quot;---&amp;quot;, fileConn, append = T)
    }
  }
  # apply the &amp;quot;create_md&amp;quot; function over the publications list to generate
  # the different &amp;quot;md&amp;quot; files.
  
  apply(mypubs, FUN = function(x) create_md(x), MARGIN = 1)
}

my_bibfile &amp;lt;- here::here(&amp;quot;mylib.bib&amp;quot;)
out_fold   &amp;lt;- here::here(&amp;quot;content/publication&amp;quot;)

bibtex_2academic(bibfile  = my_bibfile, 
                 outfold   = out_fold, 
                 abstract  = FALSE,
                 overwrite = TRUE,
                 admin.surname = &amp;quot;YourSurname&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cv&#34;&gt;CV&lt;/h2&gt;
&lt;p&gt;To add a CV button to header line, one has to include the code below into &lt;code&gt;config/_default/menus.toml&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[[main]]
  name = &amp;quot;CV&amp;quot;
  url = &amp;quot;files/cv.pdf&amp;quot;
  weight = 60
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the &lt;code&gt;highlight&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```python
import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;math&#34;&gt;Math&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for $\LaTeX$ math. You can enable this feature by toggling the &lt;code&gt;math&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;To render &lt;em&gt;inline&lt;/em&gt; or &lt;em&gt;block&lt;/em&gt; math, wrap your LaTeX math with &lt;code&gt;$...$&lt;/code&gt; or &lt;code&gt;$$...$$&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;math block&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$\gamma_{n} = \frac{ 
\left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T 
\left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}
{\left \|\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right \|^2}$$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;$$\gamma_{n} = \frac{ \left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T \left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}{\left |\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right |^2}$$&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;inline math&lt;/strong&gt; &lt;code&gt;$\nabla F(\mathbf{x}_{n})$&lt;/code&gt; renders as $\nabla F(\mathbf{x}_{n})$.&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;multi-line math&lt;/strong&gt; using the &lt;code&gt;\\&lt;/code&gt; math linebreak:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$f(k;p_0^*) = \begin{cases} p_0^* &amp;amp; \text{if }k=1, \\
1-p_0^* &amp;amp; \text {if }k=0.\end{cases}$$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;$$f(k;p_0^*) = \begin{cases} p_0^* &amp;amp; \text{if }k=1, \&lt;br&gt;
1-p_0^* &amp;amp; \text {if }k=0.\end{cases}$$&lt;/p&gt;
&lt;h3 id=&#34;diagrams&#34;&gt;Diagrams&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the &lt;code&gt;diagram&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file or by adding &lt;code&gt;diagram: true&lt;/code&gt; to your page front matter.&lt;/p&gt;
&lt;p&gt;An example &lt;strong&gt;flowchart&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;sequence diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;Gantt diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;class diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  &amp;lt;&amp;lt;service&amp;gt;&amp;gt;
  int id
  size()
}
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  &amp;lt;&amp;lt;service&amp;gt;&amp;gt;
  int id
  size()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;state diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;todo-lists&#34;&gt;Todo lists&lt;/h3&gt;
&lt;p&gt;You can even write your todo lists in Academic too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;- [x] Write math example
- [x] Write diagram example
- [ ] Do something else
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt;Write math example&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt;Write diagram example&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt;Do something else&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tables&#34;&gt;Tables&lt;/h3&gt;
&lt;p&gt;Represent your data in tables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;| First Header  | Second Header |
| ------------- | ------------- |
| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;asides&#34;&gt;Asides&lt;/h3&gt;
&lt;p&gt;Academic supports a &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#alerts&#34;&gt;shortcode for asides&lt;/a&gt;, also referred to as &lt;em&gt;notices&lt;/em&gt;, &lt;em&gt;hints&lt;/em&gt;, or &lt;em&gt;alerts&lt;/em&gt;. By wrapping a paragraph in &lt;code&gt;{{% alert note %}} ... {{% /alert %}}&lt;/code&gt;, it will render as an aside.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% alert note %}}
A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
{{% /alert %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>https://www.martens.tech/post/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      <guid>https://www.martens.tech/post/2015-07-23-r-rmarkdown/</guid>
      <description>


&lt;div id=&#34;r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R Markdown&lt;/h1&gt;
&lt;p&gt;This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; class=&#34;uri&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can embed an R code chunk like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(cars)
##      speed           dist       
##  Min.   : 4.0   Min.   :  2.00  
##  1st Qu.:12.0   1st Qu.: 26.00  
##  Median :15.0   Median : 36.00  
##  Mean   :15.4   Mean   : 42.98  
##  3rd Qu.:19.0   3rd Qu.: 56.00  
##  Max.   :25.0   Max.   :120.00
fit &amp;lt;- lm(dist ~ speed, data = cars)
fit
## 
## Call:
## lm(formula = dist ~ speed, data = cars)
## 
## Coefficients:
## (Intercept)        speed  
##     -17.579        3.932&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Including Plots&lt;/h1&gt;
&lt;p&gt;You can also embed plots. See Figure &lt;a href=&#34;#fig:pie&#34;&gt;1&lt;/a&gt; for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mar = c(0, 1, 0, 1))
pie(
  c(280, 60, 20),
  c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;),
  col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;),
  init.angle = -50, border = NA
)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pie&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://www.martens.tech/post/2015-07-23-r-rmarkdown_files/figure-html/pie-1.png&#34; alt=&#34;A fancy pie chart.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: A fancy pie chart.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
